#!/bin/sh

# Takes specs for Ruby and tries to translate them all into other
# languages. If file already exists, just skips it, thus creating only
# missing specs

CPP_STL_SPEC_DIR=spec/cpp_stl
CSHARP_SPEC_DIR=spec/csharp/Kaitai.Struct.Tests/tests
CSHARP_ASYNC_SPEC_DIR=spec/csharp_async/Kaitai.Struct.Tests/tests
JAVASCRIPT_SPEC_DIR=spec/javascript
JAVA_SPEC_DIR=spec/java/src/io/kaitai/struct/spec
LUA_SPEC_DIR=spec/lua
PERL_SPEC_DIR=spec/perl
PHP_SPEC_DIR=spec/php
PYTHON_SPEC_DIR=spec/python
RUBY_SPEC_DIR=spec/ruby

generate_spec()
{
	local src_spec="$1"
	local dst_spec="$2"
	local lang="$3"

	if [ ! -r "$dst_spec" ]; then
		echo "$lang: $dst_spec"
		"./spec_ruby_to_$lang" <"$src_spec" >"$dst_spec"
	fi
}

generate_perl_spec()
{
	local src_spec="$1"
	local dst_spec="$2"
	local lang="$3"

	if [ ! -r "$dst_spec" ]; then
		echo "$lang: $dst_spec"
		"./spec_python_to_$lang" <"$src_spec" >"$dst_spec"
	fi
}

for FN in "$RUBY_SPEC_DIR"/*_spec.rb; do
	SPEC=$(basename "$FN" | sed 's/_spec\.rb$//')
	UCC_SPEC=$(echo "$SPEC" | ruby -e 'puts gets.chomp.split(/_/).map { |x| x.capitalize }.join')

	generate_spec "$FN" "$CPP_STL_SPEC_DIR/test_$SPEC.cpp" cpp_stl
	generate_spec "$FN" "$CSHARP_SPEC_DIR/Spec${UCC_SPEC}.cs" csharp
	generate_spec "$FN" "$CSHARP_ASYNC_SPEC_DIR/Spec${UCC_SPEC}.cs" csharp_async
	generate_spec "$FN" "$JAVA_SPEC_DIR/Test${UCC_SPEC}.java" java
	generate_spec "$FN" "$JAVASCRIPT_SPEC_DIR/test_$SPEC.js" javascript
	generate_spec "$FN" "$LUA_SPEC_DIR/test_$SPEC.lua" lua
	generate_spec "$FN" "$PHP_SPEC_DIR/${UCC_SPEC}Test.php" php
	generate_spec "$FN" "$PYTHON_SPEC_DIR/test_$SPEC.py" python
done

for FN in "$PYTHON_SPEC_DIR"/test_*.py; do
	SPEC=$(basename "$FN" | sed 's/^test_//; s/\.py$//')
	UCC_SPEC=$(echo "$SPEC" | ruby -e 'puts gets.chomp.split(/_/).map { |x| x.capitalize }.join')

	generate_perl_spec "$FN" "$PERL_SPEC_DIR/Test${UCC_SPEC}.t" perl
done
