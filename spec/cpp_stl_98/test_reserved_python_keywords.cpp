// Autogenerated from KST: please remove this line if doing any edits by hand!

#include <boost/test/unit_test.hpp>
#include "reserved_python_keywords.h"
#include <iostream>
#include <fstream>
#include <vector>

BOOST_AUTO_TEST_CASE(test_reserved_python_keywords) {
    std::ifstream ifs("src/full256.bin", std::ifstream::binary);
    kaitai::kstream ks(&ifs);
    reserved_python_keywords_t* r = new reserved_python_keywords_t(&ks);
    BOOST_CHECK_EQUAL(r->and(), 0);
    BOOST_CHECK_EQUAL(r->as(), 1);
    BOOST_CHECK_EQUAL(r->assert(), 2);
    BOOST_CHECK_EQUAL(r->async(), 3);
    BOOST_CHECK_EQUAL(r->await(), 4);
    BOOST_CHECK_EQUAL(r->break(), 5);
    BOOST_CHECK_EQUAL(r->class(), 6);
    BOOST_CHECK_EQUAL(r->continue(), 7);
    BOOST_CHECK_EQUAL(r->def(), 8);
    BOOST_CHECK_EQUAL(r->del(), 9);
    BOOST_CHECK_EQUAL(r->elif(), 10);
    BOOST_CHECK_EQUAL(r->else(), 11);
    BOOST_CHECK_EQUAL(r->except(), 12);
    BOOST_CHECK_EQUAL(r->false(), 13);
    BOOST_CHECK_EQUAL(r->finally(), 14);
    BOOST_CHECK_EQUAL(r->for(), 15);
    BOOST_CHECK_EQUAL(r->from(), 16);
    BOOST_CHECK_EQUAL(r->global(), 17);
    BOOST_CHECK_EQUAL(r->if(), 18);
    BOOST_CHECK_EQUAL(r->import(), 19);
    BOOST_CHECK_EQUAL(r->in(), 20);
    BOOST_CHECK_EQUAL(r->is(), 21);
    BOOST_CHECK_EQUAL(r->lambda(), 22);
    BOOST_CHECK_EQUAL(r->none(), 23);
    BOOST_CHECK_EQUAL(r->nonlocal(), 24);
    BOOST_CHECK_EQUAL(r->not(), 25);
    BOOST_CHECK_EQUAL(r->or(), 26);
    BOOST_CHECK_EQUAL(r->pass(), 27);
    BOOST_CHECK_EQUAL(r->raise(), 28);
    BOOST_CHECK_EQUAL(r->return(), 29);
    BOOST_CHECK_EQUAL(r->true(), 30);
    BOOST_CHECK_EQUAL(r->try(), 31);
    BOOST_CHECK_EQUAL(r->while(), 32);
    BOOST_CHECK_EQUAL(r->with(), 33);
    BOOST_CHECK_EQUAL(r->yield(), 34);
    BOOST_CHECK_EQUAL(r->keyword_struct_def()->while(), 35);
    BOOST_CHECK_EQUAL(r->keyword_struct_def()->for(), 36);
    BOOST_CHECK_EQUAL(r->keyword_struct_def()->with(), 37);
    BOOST_CHECK_EQUAL(r->keyword_struct_false()->pass(), 38);
    BOOST_CHECK_EQUAL(r->keyword_enum(), reserved_python_keywords_t::TRUE_AND);
    BOOST_CHECK_EQUAL(r->keyword_nested_enum(), reserved_python_keywords_t::def_t::TRY_EXCEPT);
    BOOST_CHECK_EQUAL(r->inst_keyword_seq(), 1);
    BOOST_CHECK_EQUAL(r->inst_keyword_enum(), reserved_python_keywords_t::TRUE_IF);
    BOOST_CHECK_EQUAL(r->inst_keyword_enum_to_i(), 6);
    BOOST_CHECK_EQUAL(r->keyword_struct_def()->return(), 71);

    delete r;
}
