// Autogenerated from KST: please remove this line if doing any edits by hand!

package io.kaitai.struct.spec;

import io.kaitai.struct.testformats.ReservedPythonKeywords;
import org.testng.annotations.Test;
import static org.testng.Assert.*;
public class TestReservedPythonKeywords extends CommonSpec {

    @Test
    public void testReservedPythonKeywords() throws Exception {
        ReservedPythonKeywords r = ReservedPythonKeywords.fromFile(SRC_DIR + "full256.bin");
        assertIntEquals(r.and(), 1);
        assertIntEquals(r.as(), 2);
        assertIntEquals(r.assert(), 3);
        assertIntEquals(r.async(), 4);
        assertIntEquals(r.await(), 5);
        assertIntEquals(r.break(), 6);
        assertIntEquals(r.class(), 7);
        assertIntEquals(r.continue(), 8);
        assertIntEquals(r.def(), 9);
        assertIntEquals(r.del(), 10);
        assertIntEquals(r.elif(), 11);
        assertIntEquals(r.else(), 12);
        assertIntEquals(r.except(), 13);
        assertIntEquals(r.false(), 14);
        assertIntEquals(r.finally(), 15);
        assertIntEquals(r.for(), 16);
        assertIntEquals(r.from(), 17);
        assertIntEquals(r.global(), 18);
        assertIntEquals(r.if(), 19);
        assertIntEquals(r.import(), 20);
        assertIntEquals(r.in(), 21);
        assertIntEquals(r.is(), 22);
        assertIntEquals(r.lambda(), 23);
        assertIntEquals(r.none(), 24);
        assertIntEquals(r.nonlocal(), 25);
        assertIntEquals(r.not(), 26);
        assertIntEquals(r.or(), 27);
        assertIntEquals(r.pass(), 28);
        assertIntEquals(r.raise(), 29);
        assertIntEquals(r.return(), 30);
        assertIntEquals(r.true(), 31);
        assertIntEquals(r.try(), 32);
        assertIntEquals(r.while(), 33);
        assertIntEquals(r.with(), 34);
        assertIntEquals(r.yield(), 35);
        assertIntEquals(r.keywordStruct().while(), 36);
        assertIntEquals(r.keywordStruct().for(), 37);
        assertIntEquals(r.keywordStruct().with(), 38);
        assertEquals(r.keywordEnum(), ReservedPythonKeywords.True.AND);
        assertEquals(r.keywordNestedEnum(), ReservedPythonKeywords.Def.Try.EXCEPT);
        assertIntEquals(r.inst1(), 3);
        assertIntEquals(r.keywordStruct().return(), 73);
    }
}
