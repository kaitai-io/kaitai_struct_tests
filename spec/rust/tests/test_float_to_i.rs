// Autogenerated from KST: please remove this line if doing any edits by hand!

use kaitai::{BytesReader, KStruct, KStructUnit};
use kaitai_test::float_to_i::*;
use std::fs;

#[test]
fn test_float_to_i() {
    let data = fs::read("../../src/floating_points.bin").expect("Unable to read data.");
    let reader = BytesReader::new(&data[..]);
    let mut r = FloatToI::default();
    r.read(&reader, None, KStructUnit::parent_stack()).expect("Unable to parse data.");
    assert_eq!(r.single_value, 0.5);
    assert_eq!(r.double_value, 0.25);
    // assert_eq!(Attribute(Name(identifier(q1w2e3)),identifier(single_i)), IntNum(0))
    // assert_eq!(Attribute(Name(identifier(q1w2e3)),identifier(double_i)), IntNum(0))
    // assert_eq!(Attribute(Name(identifier(q1w2e3)),identifier(float1_i)), IntNum(1))
    // assert_eq!(Attribute(Name(identifier(q1w2e3)),identifier(float2_i)), IntNum(1))
    // assert_eq!(Attribute(Name(identifier(q1w2e3)),identifier(float3_i)), IntNum(1))
    // assert_eq!(Attribute(Name(identifier(q1w2e3)),identifier(float4_i)), UnaryOp(Minus,IntNum(2)))
}
