// Autogenerated from KST: please remove this line if doing any edits by hand!

use std::fs;
extern crate kaitai;
use self::kaitai::*;
use rust::formats::reserved_python_keywords::*;

#[test]
fn test_reserved_python_keywords() -> KResult<()> {
    let bytes = fs::read("../../src/full256.bin").unwrap();
    let _io = BytesReader::from(bytes);
    let r: OptRc<ReservedPythonKeywords> = ReservedPythonKeywords::read_into(&_io, None, None)?;
    assert_eq!(*r.and(), 1);
    assert_eq!(*r.as(), 2);
    assert_eq!(*r.assert(), 3);
    assert_eq!(*r.async(), 4);
    assert_eq!(*r.await(), 5);
    assert_eq!(*r.break(), 6);
    assert_eq!(*r.class(), 7);
    assert_eq!(*r.continue(), 8);
    assert_eq!(*r.def(), 9);
    assert_eq!(*r.del(), 10);
    assert_eq!(*r.elif(), 11);
    assert_eq!(*r.else(), 12);
    assert_eq!(*r.except(), 13);
    assert_eq!(*r.false(), 14);
    assert_eq!(*r.finally(), 15);
    assert_eq!(*r.for(), 16);
    assert_eq!(*r.from(), 17);
    assert_eq!(*r.global(), 18);
    assert_eq!(*r.if(), 19);
    assert_eq!(*r.import(), 20);
    assert_eq!(*r.in(), 21);
    assert_eq!(*r.is(), 22);
    assert_eq!(*r.lambda(), 23);
    assert_eq!(*r.none(), 24);
    assert_eq!(*r.nonlocal(), 25);
    assert_eq!(*r.not(), 26);
    assert_eq!(*r.or(), 27);
    assert_eq!(*r.pass(), 28);
    assert_eq!(*r.raise(), 29);
    assert_eq!(*r.return(), 30);
    assert_eq!(*r.true(), 31);
    assert_eq!(*r.try(), 32);
    assert_eq!(*r.while(), 33);
    assert_eq!(*r.with(), 34);
    assert_eq!(*r.yield(), 35);
    assert_eq!(*r.keyword_struct().while(), 36);
    assert_eq!(*r.keyword_struct().for(), 37);
    assert_eq!(*r.keyword_struct().with(), 38);
    assert_eq!(*r.keyword_enum(), ReservedPythonKeywords_True::And);
    assert_eq!(*r.keyword_nested_enum(), ReservedPythonKeywords_Def_Try::Except);
    assert_eq!(*r.inst1()?, 3);
    assert_eq!(*r.keyword_struct().return()?, 73);
    Ok(())
}
