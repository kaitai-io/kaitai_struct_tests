// Autogenerated from KST: please remove this line if doing any edits by hand!

use kaitai::{BytesReader, KStruct, KStructUnit};
use kaitai_test::nested_same_name2::*;
use std::fs;

#[test]
fn test_nested_same_name2() {
    let data = fs::read("../../src/nested_same_name2.bin").expect("Unable to read data.");
    let reader = BytesReader::new(&data[..]);
    let mut r = NestedSameName2::default();
    r.read(&reader, None, KStructUnit::parent_stack()).expect("Unable to parse data.");
    assert_eq!(r.version, 66);
    // assert_eq!(Attribute(Attribute(Name(identifier(q1w2e3)),identifier(main_data)),identifier(main_size)), IntNum(2))
    // assert_eq!(Attribute(Attribute(Attribute(Name(identifier(q1w2e3)),identifier(main_data)),identifier(foo)),identifier(data1)), List(ArrayBuffer(IntNum(17), IntNum(17), IntNum(17), IntNum(17))))
    // assert_eq!(Attribute(Attribute(Name(identifier(q1w2e3)),identifier(dummy)),identifier(dummy_size)), IntNum(3))
    // assert_eq!(Attribute(Attribute(Attribute(Name(identifier(q1w2e3)),identifier(dummy)),identifier(foo)),identifier(data2)), List(ArrayBuffer(IntNum(34), IntNum(34), IntNum(34), IntNum(34), IntNum(34), IntNum(34))))
}
