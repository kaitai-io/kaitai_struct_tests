// Autogenerated from KST: please remove this line if doing any edits by hand!

use kaitai::{BytesReader, KStruct, KStructUnit};
use kaitai_test::switch_manual_int_size_else::*;
use std::fs;

#[test]
fn test_switch_manual_int_size_else() {
    let data = fs::read("../../src/switch_tlv.bin").expect("Unable to read data.");
    let reader = BytesReader::new(&data[..]);
    let mut r = SwitchManualIntSizeElse::default();
    r.read(&reader, None, KStructUnit::parent_stack()).expect("Unable to parse data.");
    // assert_eq!(Attribute(Attribute(Name(identifier(q1w2e3)),identifier(chunks)),identifier(size)), IntNum(4))
    // assert_eq!(Attribute(Subscript(Attribute(Name(identifier(q1w2e3)),identifier(chunks)),IntNum(0)),identifier(code)), IntNum(17))
    // assert_eq!(Attribute(CastToType(Attribute(Subscript(Attribute(Name(identifier(q1w2e3)),identifier(chunks)),IntNum(0)),identifier(body)),typeId(false,ArrayBuffer(switch_manual_int_size_else, chunk, chunk_meta),false)),identifier(title)), Str(Stuff))
    // assert_eq!(Attribute(CastToType(Attribute(Subscript(Attribute(Name(identifier(q1w2e3)),identifier(chunks)),IntNum(0)),identifier(body)),typeId(false,ArrayBuffer(switch_manual_int_size_else, chunk, chunk_meta),false)),identifier(author)), Str(Me))
    // assert_eq!(Attribute(Subscript(Attribute(Name(identifier(q1w2e3)),identifier(chunks)),IntNum(1)),identifier(code)), IntNum(34))
    // assert_eq!(Attribute(CastToType(Attribute(Subscript(Attribute(Name(identifier(q1w2e3)),identifier(chunks)),IntNum(1)),identifier(body)),typeId(false,ArrayBuffer(switch_manual_int_size_else, chunk, chunk_dir),false)),identifier(entries)), List(ArrayBuffer(Str(AAAA), Str(BBBB), Str(CCCC))))
    // assert_eq!(Attribute(Subscript(Attribute(Name(identifier(q1w2e3)),identifier(chunks)),IntNum(2)),identifier(code)), IntNum(51))
    // assert_eq!(Attribute(CastToType(Attribute(Subscript(Attribute(Name(identifier(q1w2e3)),identifier(chunks)),IntNum(2)),identifier(body)),typeId(false,ArrayBuffer(switch_manual_int_size_else, chunk, dummy),false)),identifier(rest)), List(ArrayBuffer(IntNum(16), IntNum(32), IntNum(48), IntNum(64), IntNum(80), IntNum(96), IntNum(112), IntNum(128))))
    // assert_eq!(Attribute(Subscript(Attribute(Name(identifier(q1w2e3)),identifier(chunks)),IntNum(3)),identifier(code)), IntNum(255))
    // assert_eq!(Attribute(CastToType(Attribute(Subscript(Attribute(Name(identifier(q1w2e3)),identifier(chunks)),IntNum(3)),identifier(body)),typeId(false,ArrayBuffer(switch_manual_int_size_else, chunk, dummy),false)),identifier(rest)), CastToType(List(List()),typeId(false,ArrayBuffer(bytes),false)))
}
