// Autogenerated from KST: please remove this line if doing any edits by hand!

use kaitai::{BytesReader, KStruct, KStructUnit};
use kaitai_test::bcd_user_type_be::*;
use std::fs;

#[test]
fn test_bcd_user_type_be() {
    let data = fs::read("../../src/bcd_user_type_be.bin").expect("Unable to read data.");
    let reader = BytesReader::new(&data[..]);
    let mut r = BcdUserTypeBe::default();
    r.read(&reader, None, KStructUnit::parent_stack()).expect("Unable to parse data.");
    // assert_eq!(Attribute(Attribute(Name(identifier(q1w2e3)),identifier(ltr)),identifier(as_int)), IntNum(12345678))
    // assert_eq!(Attribute(Attribute(Name(identifier(q1w2e3)),identifier(ltr)),identifier(as_str)), Str(12345678))
    // assert_eq!(Attribute(Attribute(Name(identifier(q1w2e3)),identifier(rtl)),identifier(as_int)), IntNum(87654321))
    // assert_eq!(Attribute(Attribute(Name(identifier(q1w2e3)),identifier(rtl)),identifier(as_str)), Str(87654321))
    // assert_eq!(Attribute(Attribute(Name(identifier(q1w2e3)),identifier(leading_zero_ltr)),identifier(as_int)), IntNum(123456))
    // assert_eq!(Attribute(Attribute(Name(identifier(q1w2e3)),identifier(leading_zero_ltr)),identifier(as_str)), Str(00123456))
}
