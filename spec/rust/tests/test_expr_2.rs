// Autogenerated from KST: please remove this line if doing any edits by hand!

use kaitai::{BytesReader, KStruct, KStructUnit};
use kaitai_test::expr_2::*;
use std::fs;

#[test]
fn test_expr_2() {
    let data = fs::read("../../src/str_encodings.bin").expect("Unable to read data.");
    let reader = BytesReader::new(&data[..]);
    let mut r = Expr2::default();
    r.read(&reader, None, KStructUnit::parent_stack()).expect("Unable to parse data.");
    // assert_eq!(Attribute(Attribute(Name(identifier(q1w2e3)),identifier(str1)),identifier(len_orig)), IntNum(10))
    // assert_eq!(Attribute(Attribute(Name(identifier(q1w2e3)),identifier(str1)),identifier(len_mod)), IntNum(7))
    // assert_eq!(Attribute(Attribute(Name(identifier(q1w2e3)),identifier(str1)),identifier(str)), Str(Some AS))
    // assert_eq!(Attribute(Name(identifier(q1w2e3)),identifier(str1_len)), IntNum(7))
    // assert_eq!(Attribute(Name(identifier(q1w2e3)),identifier(str1_len_mod)), IntNum(7))
    // assert_eq!(Attribute(Name(identifier(q1w2e3)),identifier(str1_byte1)), IntNum(73))
    // assert_eq!(Attribute(Name(identifier(q1w2e3)),identifier(str1_avg)), IntNum(73))
    // assert_eq!(Attribute(Name(identifier(q1w2e3)),identifier(str1_char5)), Str(e))
    // assert_eq!(Attribute(Attribute(Name(identifier(q1w2e3)),identifier(str1_tuple5)),identifier(byte0)), IntNum(101))
    // assert_eq!(Attribute(Attribute(Name(identifier(q1w2e3)),identifier(str1_tuple5)),identifier(byte0)), IntNum(101))
    // assert_eq!(Attribute(Attribute(Name(identifier(q1w2e3)),identifier(str1_tuple5)),identifier(byte1)), IntNum(32))
    // assert_eq!(Attribute(Attribute(Name(identifier(q1w2e3)),identifier(str1_tuple5)),identifier(byte2)), IntNum(65))
    // assert_eq!(Attribute(Attribute(Name(identifier(q1w2e3)),identifier(str1_tuple5)),identifier(avg)), IntNum(48))
    // assert_eq!(Attribute(Attribute(Name(identifier(q1w2e3)),identifier(str2_tuple5)),identifier(byte0)), IntNum(101))
    // assert_eq!(Attribute(Attribute(Name(identifier(q1w2e3)),identifier(str2_tuple5)),identifier(byte1)), IntNum(32))
    // assert_eq!(Attribute(Attribute(Name(identifier(q1w2e3)),identifier(str2_tuple5)),identifier(byte2)), IntNum(65))
    // assert_eq!(Attribute(Attribute(Name(identifier(q1w2e3)),identifier(str2_tuple5)),identifier(avg)), IntNum(48))
}
