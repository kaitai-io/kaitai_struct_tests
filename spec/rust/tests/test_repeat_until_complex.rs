// Autogenerated from KST: please remove this line if doing any edits by hand!

use kaitai::{BytesReader, KStruct, KStructUnit};
use kaitai_test::repeat_until_complex::*;
use std::fs;

#[test]
fn test_repeat_until_complex() {
    let data = fs::read("../../src/repeat_until_complex.bin").expect("Unable to read data.");
    let reader = BytesReader::new(&data[..]);
    let mut r = RepeatUntilComplex::default();
    r.read(&reader, None, KStructUnit::parent_stack()).expect("Unable to parse data.");
    // assert_eq!(Attribute(Attribute(Name(identifier(q1w2e3)),identifier(first)),identifier(size)), IntNum(3))
    // assert_eq!(Attribute(Subscript(Attribute(Name(identifier(q1w2e3)),identifier(first)),IntNum(0)),identifier(count)), IntNum(4))
    // assert_eq!(Attribute(Subscript(Attribute(Name(identifier(q1w2e3)),identifier(first)),IntNum(0)),identifier(values)), List(ArrayBuffer(BinOp(IntNum(0),Add,IntNum(1)), IntNum(2), IntNum(3), IntNum(4))))
    // assert_eq!(Attribute(Subscript(Attribute(Name(identifier(q1w2e3)),identifier(first)),IntNum(1)),identifier(count)), IntNum(2))
    // assert_eq!(Attribute(Subscript(Attribute(Name(identifier(q1w2e3)),identifier(first)),IntNum(1)),identifier(values)), List(ArrayBuffer(BinOp(IntNum(0),Add,IntNum(1)), IntNum(2))))
    // assert_eq!(Attribute(Subscript(Attribute(Name(identifier(q1w2e3)),identifier(first)),IntNum(2)),identifier(count)), IntNum(0))
    // assert_eq!(Attribute(Attribute(Name(identifier(q1w2e3)),identifier(second)),identifier(size)), IntNum(4))
    // assert_eq!(Attribute(Subscript(Attribute(Name(identifier(q1w2e3)),identifier(second)),IntNum(0)),identifier(count)), IntNum(6))
    // assert_eq!(Attribute(Subscript(Attribute(Name(identifier(q1w2e3)),identifier(second)),IntNum(0)),identifier(values)), List(ArrayBuffer(BinOp(IntNum(0),Add,IntNum(1)), IntNum(2), IntNum(3), IntNum(4), IntNum(5), IntNum(6))))
    // assert_eq!(Attribute(Subscript(Attribute(Name(identifier(q1w2e3)),identifier(second)),IntNum(1)),identifier(count)), IntNum(3))
    // assert_eq!(Attribute(Subscript(Attribute(Name(identifier(q1w2e3)),identifier(second)),IntNum(1)),identifier(values)), List(ArrayBuffer(BinOp(IntNum(0),Add,IntNum(1)), IntNum(2), IntNum(3))))
    // assert_eq!(Attribute(Subscript(Attribute(Name(identifier(q1w2e3)),identifier(second)),IntNum(2)),identifier(count)), IntNum(4))
    // assert_eq!(Attribute(Subscript(Attribute(Name(identifier(q1w2e3)),identifier(second)),IntNum(2)),identifier(values)), List(ArrayBuffer(BinOp(IntNum(0),Add,IntNum(1)), IntNum(2), IntNum(3), IntNum(4))))
    // assert_eq!(Attribute(Subscript(Attribute(Name(identifier(q1w2e3)),identifier(second)),IntNum(3)),identifier(count)), IntNum(0))
    assert_eq!(r.third, [(0 + 102), 111, 111, 98, 97, 114, 0]);
}
