// Autogenerated from KST: please remove this line if doing any edits by hand!

use kaitai::{BytesReader, KStruct, KStructUnit};
use kaitai_test::ts_packet_header::*;
use std::fs;

#[test]
fn test_ts_packet_header() {
    let data = fs::read("../../src/ts_packet.bin").expect("Unable to read data.");
    let reader = BytesReader::new(&data[..]);
    let mut r = TsPacketHeader::default();
    r.read(&reader, None, KStructUnit::parent_stack()).expect("Unable to parse data.");
    assert_eq!(r.sync_byte, 71);
    assert_eq!(r.transport_error_indicator, false);
    assert_eq!(r.payload_unit_start_indicator, false);
    assert_eq!(r.transport_priority, true);
    assert_eq!(r.pid, 33);
    assert_eq!(r.transport_scrambling_control, 0);
    // assert_eq!(Attribute(Name(identifier(q1w2e3)),identifier(adaptation_field_control)), EnumByLabel(identifier(adaptation_field_control_enum),identifier(payload_only),typeId(false,ArrayBuffer(ts_packet_header),false)))
}
