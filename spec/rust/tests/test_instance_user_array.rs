// Autogenerated from KST: please remove this line if doing any edits by hand!

use kaitai::{BytesReader, KStruct, KStructUnit};
use kaitai_test::instance_user_array::*;
use std::fs;

#[test]
fn test_instance_user_array() {
    let data = fs::read("../../src/instance_std_array.bin").expect("Unable to read data.");
    let reader = BytesReader::new(&data[..]);
    let mut r = InstanceUserArray::default();
    r.read(&reader, None, KStructUnit::parent_stack()).expect("Unable to parse data.");
    assert_eq!(r.ofs, 16);
    assert_eq!(r.qty_entries, 3);
    assert_eq!(r.entry_size, 4);
    // assert_eq!(Attribute(Attribute(Name(identifier(q1w2e3)),identifier(user_entries)),identifier(size)), IntNum(3))
    // assert_eq!(Attribute(Subscript(Attribute(Name(identifier(q1w2e3)),identifier(user_entries)),IntNum(0)),identifier(word1)), IntNum(4369))
    // assert_eq!(Attribute(Subscript(Attribute(Name(identifier(q1w2e3)),identifier(user_entries)),IntNum(0)),identifier(word2)), IntNum(4369))
    // assert_eq!(Attribute(Subscript(Attribute(Name(identifier(q1w2e3)),identifier(user_entries)),IntNum(1)),identifier(word1)), IntNum(8738))
    // assert_eq!(Attribute(Subscript(Attribute(Name(identifier(q1w2e3)),identifier(user_entries)),IntNum(1)),identifier(word2)), IntNum(8738))
    // assert_eq!(Attribute(Subscript(Attribute(Name(identifier(q1w2e3)),identifier(user_entries)),IntNum(2)),identifier(word1)), IntNum(13107))
    // assert_eq!(Attribute(Subscript(Attribute(Name(identifier(q1w2e3)),identifier(user_entries)),IntNum(2)),identifier(word2)), IntNum(13107))
}
