// Autogenerated from KST: please remove this line if doing any edits by hand!

use kaitai::{BytesReader, KStruct, KStructUnit};
use kaitai_test::enum_if::*;
use std::fs;

#[test]
fn test_enum_if() {
    let data = fs::read("../../src/if_struct.bin").expect("Unable to read data.");
    let reader = BytesReader::new(&data[..]);
    let mut r = EnumIf::default();
    r.read(&reader, None, KStructUnit::parent_stack()).expect("Unable to parse data.");
    // assert_eq!(Attribute(Attribute(Name(identifier(q1w2e3)),identifier(op1)),identifier(opcode)), EnumByLabel(identifier(opcodes),identifier(a_string),typeId(false,ArrayBuffer(enum_if),false)))
    // assert_eq!(Attribute(Attribute(Attribute(Name(identifier(q1w2e3)),identifier(op1)),identifier(arg_str)),identifier(str)), Str(foo))
    // assert_eq!(Attribute(Attribute(Name(identifier(q1w2e3)),identifier(op2)),identifier(opcode)), EnumByLabel(identifier(opcodes),identifier(a_tuple),typeId(false,ArrayBuffer(enum_if),false)))
    // assert_eq!(Attribute(Attribute(Attribute(Name(identifier(q1w2e3)),identifier(op2)),identifier(arg_tuple)),identifier(num1)), IntNum(66))
    // assert_eq!(Attribute(Attribute(Attribute(Name(identifier(q1w2e3)),identifier(op2)),identifier(arg_tuple)),identifier(num2)), IntNum(67))
    // assert_eq!(Attribute(Attribute(Name(identifier(q1w2e3)),identifier(op3)),identifier(opcode)), EnumByLabel(identifier(opcodes),identifier(a_string),typeId(false,ArrayBuffer(enum_if),false)))
    // assert_eq!(Attribute(Attribute(Attribute(Name(identifier(q1w2e3)),identifier(op3)),identifier(arg_str)),identifier(str)), Str(bar))
}
