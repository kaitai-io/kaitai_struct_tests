// Autogenerated from KST: please remove this line if doing any edits by hand!

use kaitai::{BytesReader, KStruct, KStructUnit};
use kaitai_test::expr_io_pos::*;
use std::fs;

#[test]
fn test_expr_io_pos() {
    let data = fs::read("../../src/expr_io_pos.bin").expect("Unable to read data.");
    let reader = BytesReader::new(&data[..]);
    let mut r = ExprIoPos::default();
    r.read(&reader, None, KStructUnit::parent_stack()).expect("Unable to parse data.");
    // assert_eq!(Attribute(Attribute(Name(identifier(q1w2e3)),identifier(substream1)),identifier(my_str)), Str(CURIOSITY))
    // assert_eq!(Attribute(Attribute(Name(identifier(q1w2e3)),identifier(substream1)),identifier(body)), List(ArrayBuffer(IntNum(17), IntNum(34), IntNum(51), IntNum(68))))
    // assert_eq!(Attribute(Attribute(Name(identifier(q1w2e3)),identifier(substream1)),identifier(number)), IntNum(66))
    // assert_eq!(Attribute(Attribute(Name(identifier(q1w2e3)),identifier(substream2)),identifier(my_str)), Str(KILLED))
    // assert_eq!(Attribute(Attribute(Name(identifier(q1w2e3)),identifier(substream2)),identifier(body)), List(ArrayBuffer(IntNum(97), IntNum(32), IntNum(99), IntNum(97), IntNum(116))))
    // assert_eq!(Attribute(Attribute(Name(identifier(q1w2e3)),identifier(substream2)),identifier(number)), IntNum(103))
}
