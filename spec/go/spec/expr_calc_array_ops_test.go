// Autogenerated from KST: please remove this line if doing any edits by hand!

package spec

import (
	"runtime/debug"
	"os"
	"testing"
	"github.com/kaitai-io/kaitai_struct_go_runtime/kaitai"
	. "test_formats"
	"github.com/stretchr/testify/assert"
)

func TestExprCalcArrayOps(t *testing.T) {
	defer func() {
		if r := recover(); r != nil {
			debug.PrintStack()
			t.Fatal("unexpected panic:", r)
		}
	}()
	f, err := os.Open("../../src/fixed_struct.bin")
	if err != nil {
		t.Fatal(err)
	}
	s := kaitai.NewStream(f)
	var r ExprCalcArrayOps
	err = r.Read(s, &r, &r)
	if err != nil {
		t.Fatal(err)
	}

	tmp1, err := r.IntArraySize()
	if err != nil {
		t.Fatal(err)
	}
	assert.EqualValues(t, 7, tmp1)
	tmp2, err := r.IntArrayFirst()
	if err != nil {
		t.Fatal(err)
	}
	assert.EqualValues(t, 10, tmp2)
	tmp3, err := r.IntArrayMid()
	if err != nil {
		t.Fatal(err)
	}
	assert.EqualValues(t, 25, tmp3)
	tmp4, err := r.IntArrayLast()
	if err != nil {
		t.Fatal(err)
	}
	assert.EqualValues(t, 1000, tmp4)
	tmp5, err := r.IntArrayMin()
	if err != nil {
		t.Fatal(err)
	}
	assert.EqualValues(t, 10, tmp5)
	tmp6, err := r.IntArrayMax()
	if err != nil {
		t.Fatal(err)
	}
	assert.EqualValues(t, 1000, tmp6)
	tmp7, err := r.DoubleArraySize()
	if err != nil {
		t.Fatal(err)
	}
	assert.EqualValues(t, 5, tmp7)
	tmp8, err := r.DoubleArrayFirst()
	if err != nil {
		t.Fatal(err)
	}
	assert.InDelta(t, 10.0, tmp8, 1e-6)
	tmp9, err := r.DoubleArrayMid()
	if err != nil {
		t.Fatal(err)
	}
	assert.InDelta(t, 25.0, tmp9, 1e-6)
	tmp10, err := r.DoubleArrayLast()
	if err != nil {
		t.Fatal(err)
	}
	assert.InDelta(t, 3.14159, tmp10, 1e-6)
	tmp11, err := r.DoubleArrayMin()
	if err != nil {
		t.Fatal(err)
	}
	assert.InDelta(t, 3.14159, tmp11, 1e-6)
	tmp12, err := r.DoubleArrayMax()
	if err != nil {
		t.Fatal(err)
	}
	assert.InDelta(t, 100.0, tmp12, 1e-6)
	tmp13, err := r.StrArraySize()
	if err != nil {
		t.Fatal(err)
	}
	assert.EqualValues(t, 4, tmp13)
	tmp14, err := r.StrArrayFirst()
	if err != nil {
		t.Fatal(err)
	}
	assert.EqualValues(t, "un", tmp14)
	tmp15, err := r.StrArrayMid()
	if err != nil {
		t.Fatal(err)
	}
	assert.EqualValues(t, "deux", tmp15)
	tmp16, err := r.StrArrayLast()
	if err != nil {
		t.Fatal(err)
	}
	assert.EqualValues(t, "quatre", tmp16)
	tmp17, err := r.StrArrayMin()
	if err != nil {
		t.Fatal(err)
	}
	assert.EqualValues(t, "deux", tmp17)
	tmp18, err := r.StrArrayMax()
	if err != nil {
		t.Fatal(err)
	}
	assert.EqualValues(t, "un", tmp18)
}
