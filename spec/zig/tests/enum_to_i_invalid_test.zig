// Autogenerated from KST: please remove this line if doing any edits by hand!

const std = @import("std");
const kaitai_struct = @import("kaitai_struct");
const enum_to_i_invalid = @import("../formats/enum_to_i_invalid.zig");

test "EnumToIInvalid" {
    const file = try std.fs.cwd().openFile("../../src/term_strz.bin", .{});
    defer file.close();
    var buffer: [8]u8 = undefined;
    var reader = file.reader(&buffer);
    const allocator = std.testing.allocator;
    var arena = std.heap.ArenaAllocator.init(allocator);
    defer arena.deinit();
    var _io = kaitai_struct.KaitaiStream.fromFileReader(&reader);
    const r = try enum_to_i_invalid.EnumToIInvalid.create(&arena, &_io, null, null);
    try std.testing.expectEqual(enum_to_i_invalid.EnumToIInvalid.Animal.dog, r.pet_1);
    try std.testing.expectEqual(111, r.pet_2);
    try std.testing.expectEqual(111, (try r.pet2I()));
    try std.testing.expectEqualStrings("111", (try r.pet2IToS()));
    try std.testing.expectEqual(32879, (try r.pet2Mod()));
    try std.testing.expectEqual(true, (try r.oneLtTwo()));
    try std.testing.expectEqual(true, (try r.pet2EqIntT()));
    try std.testing.expectEqual(false, (try r.pet2EqIntF()));
}
