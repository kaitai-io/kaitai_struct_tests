// Autogenerated from KST: please remove this line if doing any edits by hand!

const std = @import("std");
const kaitai_struct = @import("kaitai_struct");
const combine_str = @import("../formats/combine_str.zig");

test "CombineStr" {
    const file = try std.fs.cwd().openFile("../../src/term_strz.bin", .{});
    defer file.close();
    var buffer: [8]u8 = undefined;
    var reader = file.reader(&buffer);
    const allocator = std.testing.allocator;
    var arena = std.heap.ArenaAllocator.init(allocator);
    defer arena.deinit();
    var _io = kaitai_struct.KaitaiStream.fromFileReader(&reader);
    const r = try combine_str.CombineStr.create(&arena, &_io, null, null);
    try std.testing.expectEqualStrings("foo", r.str_term);
    try std.testing.expectEqualStrings("bar|", r.str_limit);
    try std.testing.expectEqualStrings("baz@", r.str_eos);
    try std.testing.expectEqualStrings("bar", (try r.strCalc()));
    try std.testing.expectEqualStrings("baz", (try r.strCalcBytes()));
    try std.testing.expectEqualStrings("foo", (try r.termOrLimit()));
    try std.testing.expectEqualStrings("baz@", (try r.termOrEos()));
    try std.testing.expectEqualStrings("foo", (try r.termOrCalc()));
    try std.testing.expectEqualStrings("baz", (try r.termOrCalcBytes()));
    try std.testing.expectEqualStrings("bar|", (try r.limitOrEos()));
    try std.testing.expectEqualStrings("bar", (try r.limitOrCalc()));
    try std.testing.expectEqualStrings("bar|", (try r.limitOrCalcBytes()));
    try std.testing.expectEqualStrings("bar", (try r.eosOrCalc()));
    try std.testing.expectEqualStrings("baz@", (try r.eosOrCalcBytes()));
    try std.testing.expectEqualStrings("baz", (try r.calcOrCalcBytes()));
}
