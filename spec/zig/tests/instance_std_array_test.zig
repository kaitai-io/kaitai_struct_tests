// Autogenerated from KST: please remove this line if doing any edits by hand!

const std = @import("std");
const kaitai_struct = @import("kaitai_struct");
const instance_std_array = @import("../formats/instance_std_array.zig");

test "InstanceStdArray" {
    const file = try std.fs.cwd().openFile("../../src/instance_std_array.bin", .{});
    defer file.close();
    var buffer: [8]u8 = undefined;
    var reader = file.reader(&buffer);
    const allocator = std.testing.allocator;
    var arena = std.heap.ArenaAllocator.init(allocator);
    defer arena.deinit();
    var _io = kaitai_struct.KaitaiStream.fromFileReader(&reader);
    const r = try instance_std_array.InstanceStdArray.create(&arena, &_io, null, null);
    try std.testing.expectEqual(16, r.ofs);
    try std.testing.expectEqual(3, r.qty_entries);
    try std.testing.expectEqual(4, r.entry_size);
    try std.testing.expectEqual(3, (try r.entries()).items.len);
    try std.testing.expectEqualSlices(u8, &[_]u8{ 17, 17, 17, 17 }, (try r.entries()).items[0]);
    try std.testing.expectEqualSlices(u8, &[_]u8{ 34, 34, 34, 34 }, (try r.entries()).items[1]);
    try std.testing.expectEqualSlices(u8, &[_]u8{ 51, 51, 51, 51 }, (try r.entries()).items[2]);
}
