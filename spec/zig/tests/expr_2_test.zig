// Autogenerated from KST: please remove this line if doing any edits by hand!

const std = @import("std");
const kaitai_struct = @import("kaitai_struct");
const expr_2 = @import("../formats/expr_2.zig");

test "Expr2" {
    const file = try std.fs.cwd().openFile("../../src/str_encodings.bin", .{});
    defer file.close();
    var buffer: [8]u8 = undefined;
    var reader = file.reader(&buffer);
    const allocator = std.testing.allocator;
    var arena = std.heap.ArenaAllocator.init(allocator);
    defer arena.deinit();
    var _io = kaitai_struct.KaitaiStream.fromFileReader(&reader);
    const r = try expr_2.Expr2.create(&arena, &_io, null, null);
    try std.testing.expectEqual(10, r.str1.len_orig);
    try std.testing.expectEqual(7, (try r.str1.lenMod()));
    try std.testing.expectEqualStrings("Some AS", r.str1.str);
    try std.testing.expectEqual(7, (try r.str1Len()));
    try std.testing.expectEqual(7, (try r.str1LenMod()));
    try std.testing.expectEqual(73, (try r.str1Byte1()));
    try std.testing.expectEqual(73, (try r.str1Avg()));
    try std.testing.expectEqualStrings("e", (try r.str1Char5()));
    try std.testing.expectEqual(101, (try r.str1Tuple5()).byte0);
    try std.testing.expectEqual(101, (try r.str1Tuple5()).byte0);
    try std.testing.expectEqual(32, (try r.str1Tuple5()).byte1);
    try std.testing.expectEqual(65, (try r.str1Tuple5()).byte2);
    try std.testing.expectEqual(48, (try (try r.str1Tuple5()).avg()));
    try std.testing.expectEqual(101, (try r.str2Tuple5()).byte0);
    try std.testing.expectEqual(32, (try r.str2Tuple5()).byte1);
    try std.testing.expectEqual(65, (try r.str2Tuple5()).byte2);
    try std.testing.expectEqual(48, (try (try r.str2Tuple5()).avg()));
}
