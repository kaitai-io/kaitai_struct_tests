// Autogenerated from KST: please remove this line if doing any edits by hand!

const std = @import("std");
const kaitai_struct = @import("kaitai_struct");
const expr_fstring_0 = @import("../formats/expr_fstring_0.zig");

test "ExprFstring0" {
    const file = try std.fs.cwd().openFile("../../src/term_strz.bin", .{});
    defer file.close();
    var buffer: [8]u8 = undefined;
    var reader = file.reader(&buffer);
    const allocator = std.testing.allocator;
    var arena = std.heap.ArenaAllocator.init(allocator);
    defer arena.deinit();
    var _io = kaitai_struct.KaitaiStream.fromFileReader(&reader);
    const r = try expr_fstring_0.ExprFstring0.create(&arena, &_io, null, null);
    try std.testing.expectEqualStrings("foo|b", r.seq_str);
    try std.testing.expectEqual(97, r.seq_int);
    try std.testing.expectEqualStrings("", (try r.empty()));
    try std.testing.expectEqualStrings("abc", (try r.literal()));
    try std.testing.expectEqualStrings("abc\n\tt", (try r.literalWithEscapes()));
    try std.testing.expectEqualStrings("abc=123", (try r.headAndIntLiteral()));
    try std.testing.expectEqualStrings("abc=foo", (try r.headAndStrLiteral()));
    try std.testing.expectEqualStrings("abc=97", (try r.headAndInt()));
    try std.testing.expectEqualStrings("abc=foo|b", (try r.headAndStr()));
}
