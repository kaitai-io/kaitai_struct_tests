// Autogenerated from KST: please remove this line if doing any edits by hand!

const std = @import("std");
const kaitai_struct = @import("kaitai_struct");
const switch_manual_int_size_eos = @import("../formats/switch_manual_int_size_eos.zig");

test "SwitchManualIntSizeEos" {
    const file = try std.fs.cwd().openFile("../../src/switch_tlv.bin", .{});
    defer file.close();
    var buffer: [8]u8 = undefined;
    var reader = file.reader(&buffer);
    const allocator = std.testing.allocator;
    var arena = std.heap.ArenaAllocator.init(allocator);
    defer arena.deinit();
    var _io = kaitai_struct.KaitaiStream.fromFileReader(&reader);
    const r = try switch_manual_int_size_eos.SwitchManualIntSizeEos.create(&arena, &_io, null, null);
    try std.testing.expectEqual(4, r.chunks.items.len);
    try std.testing.expectEqual(17, r.chunks.items[0].code);
    try std.testing.expectEqualStrings("Stuff", @as(*switch_manual_int_size_eos.SwitchManualIntSizeEos.ChunkBody.ChunkMeta, r.chunks.items[0].body.body).title);
    try std.testing.expectEqualStrings("Me", @as(*switch_manual_int_size_eos.SwitchManualIntSizeEos.ChunkBody.ChunkMeta, r.chunks.items[0].body.body).author);
    try std.testing.expectEqual(34, r.chunks.items[1].code);
    try std.testing.expectEqualSlices([]u8, &.{ "AAAA", "BBBB", "CCCC" }, @as(*switch_manual_int_size_eos.SwitchManualIntSizeEos.ChunkBody.ChunkDir, r.chunks.items[1].body.body).entries.items);
    try std.testing.expectEqual(51, r.chunks.items[2].code);
    try std.testing.expectEqualSlices(u8, &[_]u8{ 16, 32, 48, 64, 80, 96, 112, 128 }, @as([]u8, r.chunks.items[2].body.body));
    try std.testing.expectEqual(255, r.chunks.items[3].code);
    try std.testing.expectEqualSlices(u8, &[_]u8{  }, @as([]u8, r.chunks.items[3].body.body));
}
