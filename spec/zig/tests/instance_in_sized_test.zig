// Autogenerated from KST: please remove this line if doing any edits by hand!

const std = @import("std");
const kaitai_struct = @import("kaitai_struct");
const instance_in_sized = @import("../formats/instance_in_sized.zig");

test "InstanceInSized" {
    const file = try std.fs.cwd().openFile("../../src/process_rotate.bin", .{});
    defer file.close();
    var buffer: [8]u8 = undefined;
    var reader = file.reader(&buffer);
    const allocator = std.testing.allocator;
    var arena = std.heap.ArenaAllocator.init(allocator);
    defer arena.deinit();
    var _io = kaitai_struct.KaitaiStream.fromFileReader(&reader);
    const r = try instance_in_sized.InstanceInSized.create(&arena, &_io, null, null);
    try std.testing.expectEqual(9, r.cont.seq_sized.seq_f);
    try std.testing.expectEqual(172, (try r.cont.seq_sized.instInvoked()));
    try std.testing.expectEqualSlices(u8, &[_]u8{ 141, 141 }, (try r.cont.seq_sized.instUnusedBySeq()));
    try std.testing.expectEqual(237, r.cont.seq_in_stream.seq_f);
    try std.testing.expectEqualSlices(u8, &[_]u8{ 186, 123, 147 }, (try r.cont.seq_in_stream.inst()));
    try std.testing.expectEqual(99, (try r.cont.instInStream()).seq_f);
    try std.testing.expectEqualSlices(u8, &[_]u8{ 35, 1, 42 }, (try (try r.cont.instInStream()).inst()));
    try std.testing.expectEqual(52, (try r.cont.instSized()).seq_f);
    try std.testing.expectEqual(178, (try (try r.cont.instSized()).instInvoked()));
    try std.testing.expectEqualSlices(u8, &[_]u8{ 57, 178 }, (try (try r.cont.instSized()).instUnusedBySeq()));
}
