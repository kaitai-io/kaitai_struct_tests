// Autogenerated from KST: please remove this line if doing any edits by hand!

const std = @import("std");
const kaitai_struct = @import("kaitai_struct");
const integers = @import("../formats/integers.zig");

test "Integers" {
    const file = try std.fs.cwd().openFile("../../src/fixed_struct.bin", .{});
    defer file.close();
    var buffer: [8]u8 = undefined;
    var reader = file.reader(&buffer);
    const allocator = std.testing.allocator;
    var arena = std.heap.ArenaAllocator.init(allocator);
    defer arena.deinit();
    var _io = kaitai_struct.KaitaiStream.fromFileReader(&reader);
    const r = try integers.Integers.create(&arena, &_io, null, null);
    try std.testing.expectEqual(255, r.uint8);
    try std.testing.expectEqual(65535, r.uint16);
    try std.testing.expectEqual(4294967295, r.uint32);
    try std.testing.expectEqual(18446744073709551615, r.uint64);
    try std.testing.expectEqual(-1, r.sint8);
    try std.testing.expectEqual(-1, r.sint16);
    try std.testing.expectEqual(-1, r.sint32);
    try std.testing.expectEqual(-1, r.sint64);
    try std.testing.expectEqual(66, r.uint16le);
    try std.testing.expectEqual(66, r.uint32le);
    try std.testing.expectEqual(66, r.uint64le);
    try std.testing.expectEqual(-66, r.sint16le);
    try std.testing.expectEqual(-66, r.sint32le);
    try std.testing.expectEqual(-66, r.sint64le);
    try std.testing.expectEqual(66, r.uint16be);
    try std.testing.expectEqual(66, r.uint32be);
    try std.testing.expectEqual(66, r.uint64be);
    try std.testing.expectEqual(-66, r.sint16be);
    try std.testing.expectEqual(-66, r.sint32be);
    try std.testing.expectEqual(-66, r.sint64be);
}
