// Autogenerated from KST: please remove this line if doing any edits by hand!

const std = @import("std");
const kaitai_struct = @import("kaitai_struct");
const expr_3 = @import("../formats/expr_3.zig");

test "Expr3" {
    const file = try std.fs.cwd().openFile("../../src/fixed_struct.bin", .{});
    defer file.close();
    var buffer: [8]u8 = undefined;
    var reader = file.reader(&buffer);
    const allocator = std.testing.allocator;
    var arena = std.heap.ArenaAllocator.init(allocator);
    defer arena.deinit();
    var _io = kaitai_struct.KaitaiStream.fromFileReader(&reader);
    const r = try expr_3.Expr3.create(&arena, &_io, null, null);
    try std.testing.expectEqual(80, r.one);
    try std.testing.expectEqualStrings("ACK", r.two);
    try std.testing.expectEqualStrings("@ACK", (try r.three()));
    try std.testing.expectEqualStrings("_ACK_", (try r.four()));
    try std.testing.expectEqual(true, (try r.isStrEq()));
    try std.testing.expectEqual(false, (try r.isStrNe()));
    try std.testing.expectEqual(true, (try r.isStrLt()));
    try std.testing.expectEqual(false, (try r.isStrGt()));
    try std.testing.expectEqual(true, (try r.isStrLe()));
    try std.testing.expectEqual(false, (try r.isStrGe()));
    try std.testing.expectEqual(true, (try r.isStrLt2()));
    try std.testing.expectEqual(true, (try r.testNot()));
}
