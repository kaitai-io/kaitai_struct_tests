// Autogenerated from KST: please remove this line if doing any edits by hand!

const std = @import("std");
const kaitai_struct = @import("kaitai_struct");
const fixed_struct = @import("../formats/fixed_struct.zig");

test "FixedStruct" {
    const file = try std.fs.cwd().openFile("../../src/fixed_struct.bin", .{});
    defer file.close();
    var buffer: [8]u8 = undefined;
    var reader = file.reader(&buffer);
    const allocator = std.testing.allocator;
    var arena = std.heap.ArenaAllocator.init(allocator);
    defer arena.deinit();
    var _io = kaitai_struct.KaitaiStream.fromFileReader(&reader);
    const r = try fixed_struct.FixedStruct.create(&arena, &_io, null, null);
    try std.testing.expectEqual(255, (try r.hdr()).uint8);
    try std.testing.expectEqual(65535, (try r.hdr()).uint16);
    try std.testing.expectEqual(4294967295, (try r.hdr()).uint32);
    try std.testing.expectEqual(18446744073709551615, (try r.hdr()).uint64);
    try std.testing.expectEqual(-1, (try r.hdr()).sint8);
    try std.testing.expectEqual(-1, (try r.hdr()).sint16);
    try std.testing.expectEqual(-1, (try r.hdr()).sint32);
    try std.testing.expectEqual(-1, (try r.hdr()).sint64);
    try std.testing.expectEqual(66, (try r.hdr()).uint16le);
    try std.testing.expectEqual(66, (try r.hdr()).uint32le);
    try std.testing.expectEqual(66, (try r.hdr()).uint64le);
    try std.testing.expectEqual(-66, (try r.hdr()).sint16le);
    try std.testing.expectEqual(-66, (try r.hdr()).sint32le);
    try std.testing.expectEqual(-66, (try r.hdr()).sint64le);
    try std.testing.expectEqual(66, (try r.hdr()).uint16be);
    try std.testing.expectEqual(66, (try r.hdr()).uint32be);
    try std.testing.expectEqual(66, (try r.hdr()).uint64be);
    try std.testing.expectEqual(-66, (try r.hdr()).sint16be);
    try std.testing.expectEqual(-66, (try r.hdr()).sint32be);
    try std.testing.expectEqual(-66, (try r.hdr()).sint64be);
}
