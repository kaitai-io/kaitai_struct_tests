// Autogenerated from KST: please remove this line if doing any edits by hand!

const std = @import("std");
const kaitai_struct = @import("kaitai_struct");
const params_pass_bool = @import("../formats/params_pass_bool.zig");

test "ParamsPassBool" {
    const file = try std.fs.cwd().openFile("../../src/term_strz.bin", .{});
    defer file.close();
    var buffer: [8]u8 = undefined;
    var reader = file.reader(&buffer);
    const allocator = std.testing.allocator;
    var arena = std.heap.ArenaAllocator.init(allocator);
    defer arena.deinit();
    var _io = kaitai_struct.KaitaiStream.fromFileReader(&reader);
    const r = try params_pass_bool.ParamsPassBool.create(&arena, &_io, null, null);
    try std.testing.expectEqual(false, r.s_false);
    try std.testing.expectEqual(true, r.s_true);
    try std.testing.expectEqual(true, r.seq_b1.arg);
    try std.testing.expectEqual(1, r.seq_b1.foo.len);
    try std.testing.expectEqual(false, r.seq_bool.arg);
    try std.testing.expectEqual(2, r.seq_bool.foo.len);
    try std.testing.expectEqual(false, r.literal_b1.arg);
    try std.testing.expectEqual(2, r.literal_b1.foo.len);
    try std.testing.expectEqual(true, r.literal_bool.arg);
    try std.testing.expectEqual(1, r.literal_bool.foo.len);
    try std.testing.expectEqual(true, r.inst_b1.arg);
    try std.testing.expectEqual(1, r.inst_b1.foo.len);
    try std.testing.expectEqual(false, r.inst_bool.arg);
    try std.testing.expectEqual(2, r.inst_bool.foo.len);
}
