// Autogenerated from KST: please remove this line if doing any edits by hand!

const std = @import("std");
const kaitai_struct = @import("kaitai_struct");
const switch_manual_str_else = @import("../formats/switch_manual_str_else.zig");

test "SwitchManualStrElse" {
    const file = try std.fs.cwd().openFile("../../src/switch_opcodes2.bin", .{});
    defer file.close();
    var buffer: [8]u8 = undefined;
    var reader = file.reader(&buffer);
    const allocator = std.testing.allocator;
    var arena = std.heap.ArenaAllocator.init(allocator);
    defer arena.deinit();
    var _io = kaitai_struct.KaitaiStream.fromFileReader(&reader);
    const r = try switch_manual_str_else.SwitchManualStrElse.create(&arena, &_io, null, null);
    try std.testing.expectEqual(4, r.opcodes.items.len);
    try std.testing.expectEqualStrings("S", r.opcodes.items[0].code);
    try std.testing.expectEqualStrings("foo", @as(*switch_manual_str_else.SwitchManualStrElse.Opcode.Strval, r.opcodes.items[0].body).value);
    try std.testing.expectEqualStrings("X", r.opcodes.items[1].code);
    try std.testing.expectEqual(66, @as(*switch_manual_str_else.SwitchManualStrElse.Opcode.Noneval, r.opcodes.items[1].body).filler);
    try std.testing.expectEqualStrings("Y", r.opcodes.items[2].code);
    try std.testing.expectEqual(51966, @as(*switch_manual_str_else.SwitchManualStrElse.Opcode.Noneval, r.opcodes.items[2].body).filler);
    try std.testing.expectEqualStrings("I", r.opcodes.items[3].code);
    try std.testing.expectEqual(7, @as(*switch_manual_str_else.SwitchManualStrElse.Opcode.Intval, r.opcodes.items[3].body).value);
}
