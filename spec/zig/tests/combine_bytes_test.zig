// Autogenerated from KST: please remove this line if doing any edits by hand!

const std = @import("std");
const kaitai_struct = @import("kaitai_struct");
const combine_bytes = @import("../formats/combine_bytes.zig");

test "CombineBytes" {
    const file = try std.fs.cwd().openFile("../../src/term_strz.bin", .{});
    defer file.close();
    var buffer: [8]u8 = undefined;
    var reader = file.reader(&buffer);
    const allocator = std.testing.allocator;
    var arena = std.heap.ArenaAllocator.init(allocator);
    defer arena.deinit();
    var _io = kaitai_struct.KaitaiStream.fromFileReader(&reader);
    const r = try combine_bytes.CombineBytes.create(&arena, &_io, null, null);
    try std.testing.expectEqualSlices(u8, &[_]u8{ 102, 111, 111 }, r.bytes_term);
    try std.testing.expectEqualSlices(u8, &[_]u8{ 98, 97, 114, 124 }, r.bytes_limit);
    try std.testing.expectEqualSlices(u8, &[_]u8{ 98, 97, 122, 64 }, r.bytes_eos);
    try std.testing.expectEqualSlices(u8, &[_]u8{ 82, 110, 68 }, (try r.bytesCalc()));
    try std.testing.expectEqualSlices(u8, &[_]u8{ 102, 111, 111 }, (try r.termOrLimit()));
    try std.testing.expectEqualSlices(u8, &[_]u8{ 98, 97, 122, 64 }, (try r.termOrEos()));
    try std.testing.expectEqualSlices(u8, &[_]u8{ 102, 111, 111 }, (try r.termOrCalc()));
    try std.testing.expectEqualSlices(u8, &[_]u8{ 98, 97, 114, 124 }, (try r.limitOrEos()));
    try std.testing.expectEqualSlices(u8, &[_]u8{ 82, 110, 68 }, (try r.limitOrCalc()));
    try std.testing.expectEqualSlices(u8, &[_]u8{ 98, 97, 122, 64 }, (try r.eosOrCalc()));
}
