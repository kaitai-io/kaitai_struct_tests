// Autogenerated from KST: please remove this line if doing any edits by hand!

const std = @import("std");
const kaitai_struct = @import("kaitai_struct");
const enum_if = @import("../formats/enum_if.zig");

test "EnumIf" {
    const file = try std.fs.cwd().openFile("../../src/if_struct.bin", .{});
    defer file.close();
    var buffer: [8]u8 = undefined;
    var reader = file.reader(&buffer);
    const allocator = std.testing.allocator;
    var arena = std.heap.ArenaAllocator.init(allocator);
    defer arena.deinit();
    var _io = kaitai_struct.KaitaiStream.fromFileReader(&reader);
    const r = try enum_if.EnumIf.create(&arena, &_io, null, null);
    try std.testing.expectEqual(enum_if.EnumIf.Opcodes.a_string, r.op1.opcode);
    try std.testing.expectEqualStrings("foo", r.op1.arg_str.str);
    try std.testing.expectEqual(enum_if.EnumIf.Opcodes.a_tuple, r.op2.opcode);
    try std.testing.expectEqual(66, r.op2.arg_tuple.num1);
    try std.testing.expectEqual(67, r.op2.arg_tuple.num2);
    try std.testing.expectEqual(enum_if.EnumIf.Opcodes.a_string, r.op3.opcode);
    try std.testing.expectEqualStrings("bar", r.op3.arg_str.str);
}
