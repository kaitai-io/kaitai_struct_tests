// Autogenerated from KST: please remove this line if doing any edits by hand!

const std = @import("std");
const kaitai_struct = @import("kaitai_struct");
const bits_simple_le = @import("../formats/bits_simple_le.zig");

test "BitsSimpleLe" {
    const file = try std.fs.cwd().openFile("../../src/fixed_struct.bin", .{});
    defer file.close();
    var buffer: [8]u8 = undefined;
    var reader = file.reader(&buffer);
    const allocator = std.testing.allocator;
    var arena = std.heap.ArenaAllocator.init(allocator);
    defer arena.deinit();
    var _io = kaitai_struct.KaitaiStream.fromFileReader(&reader);
    const r = try bits_simple_le.BitsSimpleLe.create(&arena, &_io, null, null);
    try std.testing.expectEqual(80, r.byte_1);
    try std.testing.expectEqual(65, r.byte_2);
    try std.testing.expectEqual(true, r.bits_a);
    try std.testing.expectEqual(1, r.bits_b);
    try std.testing.expectEqual(4, r.bits_c);
    try std.testing.expectEqual(331, r.large_bits_1);
    try std.testing.expectEqual(3, r.spacer);
    try std.testing.expectEqual(393, r.large_bits_2);
    try std.testing.expectEqual(-1, r.normal_s2);
    try std.testing.expectEqual(4407632, r.byte_8_9_10);
    try std.testing.expectEqual(760556875, r.byte_11_to_14);
    try std.testing.expectEqual(1099499455812, r.byte_15_to_19);
    try std.testing.expectEqual(18446744073709551615, r.byte_20_to_27);
    try std.testing.expectEqual(123, (try r.testIfB1()));
}
