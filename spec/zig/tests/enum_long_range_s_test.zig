// Autogenerated from KST: please remove this line if doing any edits by hand!

const std = @import("std");
const kaitai_struct = @import("kaitai_struct");
const enum_long_range_s = @import("../formats/enum_long_range_s.zig");

test "EnumLongRangeS" {
    const file = try std.fs.cwd().openFile("../../src/enum_long_range_s.bin", .{});
    defer file.close();
    var buffer: [8]u8 = undefined;
    var reader = file.reader(&buffer);
    const allocator = std.testing.allocator;
    var arena = std.heap.ArenaAllocator.init(allocator);
    defer arena.deinit();
    var _io = kaitai_struct.KaitaiStream.fromFileReader(&reader);
    const r = try enum_long_range_s.EnumLongRangeS.create(&arena, &_io, null, null);
    try std.testing.expectEqual(enum_long_range_s.EnumLongRangeS.Constants.long_min, r.f1);
    try std.testing.expectEqual(enum_long_range_s.EnumLongRangeS.Constants.int_below_min, r.f2);
    try std.testing.expectEqual(enum_long_range_s.EnumLongRangeS.Constants.int_min, r.f3);
    try std.testing.expectEqual(enum_long_range_s.EnumLongRangeS.Constants.zero, r.f4);
    try std.testing.expectEqual(enum_long_range_s.EnumLongRangeS.Constants.int_max, r.f5);
    try std.testing.expectEqual(enum_long_range_s.EnumLongRangeS.Constants.int_over_max, r.f6);
    try std.testing.expectEqual(enum_long_range_s.EnumLongRangeS.Constants.long_max, r.f7);
}
