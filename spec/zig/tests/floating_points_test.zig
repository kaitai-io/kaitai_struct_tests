// Autogenerated from KST: please remove this line if doing any edits by hand!

const std = @import("std");
const kaitai_struct = @import("kaitai_struct");
const floating_points = @import("../formats/floating_points.zig");

test "FloatingPoints" {
    const file = try std.fs.cwd().openFile("../../src/floating_points.bin", .{});
    defer file.close();
    var buffer: [8]u8 = undefined;
    var reader = file.reader(&buffer);
    const allocator = std.testing.allocator;
    var arena = std.heap.ArenaAllocator.init(allocator);
    defer arena.deinit();
    var _io = kaitai_struct.KaitaiStream.fromFileReader(&reader);
    const r = try floating_points.FloatingPoints.create(&arena, &_io, null, null);
    try std.testing.expectEqual(@as(f32, 0.5), r.single_value);
    try std.testing.expectEqual(@as(f32, 0.5), r.single_value_be);
    try std.testing.expectEqual(0.25, r.double_value);
    try std.testing.expectEqual(0.25, r.double_value_be);
    try std.testing.expectEqual(1.2345, r.approximate_value);
    try std.testing.expectEqual(1.5, (try r.singleValuePlusInt()));
    try std.testing.expectEqual(1.0, (try r.singleValuePlusFloat()));
    try std.testing.expectEqual(0.3, (try r.doubleValuePlusFloat()));
}
