// Autogenerated from KST: please remove this line if doing any edits by hand!

const std = @import("std");
const kaitai_struct = @import("kaitai_struct");
const integers_double_overflow = @import("../formats/integers_double_overflow.zig");

test "IntegersDoubleOverflow" {
    const file = try std.fs.cwd().openFile("../../src/integers_double_overflow.bin", .{});
    defer file.close();
    var buffer: [8]u8 = undefined;
    var reader = file.reader(&buffer);
    const allocator = std.testing.allocator;
    var arena = std.heap.ArenaAllocator.init(allocator);
    defer arena.deinit();
    var _io = kaitai_struct.KaitaiStream.fromFileReader(&reader);
    const r = try integers_double_overflow.IntegersDoubleOverflow.create(&arena, &_io, null, null);
    try std.testing.expectEqual(-9007199254740991, r.signed_safe_min_be);
    try std.testing.expectEqual(-9007199254740991, r.signed_safe_min_le);
    try std.testing.expectEqual(9007199254740991, r.signed_safe_max_be);
    try std.testing.expectEqual(9007199254740991, r.signed_safe_max_le);
    try std.testing.expectEqualStrings("-9007199254740993", (try std.fmt.allocPrint(allocator, "{d}", .{ r.signed_unsafe_neg_be })));
    try std.testing.expectEqualStrings("-9007199254740993", (try std.fmt.allocPrint(allocator, "{d}", .{ r.signed_unsafe_neg_le })));
    try std.testing.expectEqualStrings("9007199254740993", (try std.fmt.allocPrint(allocator, "{d}", .{ r.signed_unsafe_pos_be })));
    try std.testing.expectEqualStrings("9007199254740993", (try std.fmt.allocPrint(allocator, "{d}", .{ r.signed_unsafe_pos_be })));
}
