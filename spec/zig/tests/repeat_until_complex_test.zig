// Autogenerated from KST: please remove this line if doing any edits by hand!

const std = @import("std");
const kaitai_struct = @import("kaitai_struct");
const repeat_until_complex = @import("../formats/repeat_until_complex.zig");

test "RepeatUntilComplex" {
    const file = try std.fs.cwd().openFile("../../src/repeat_until_complex.bin", .{});
    defer file.close();
    var buffer: [8]u8 = undefined;
    var reader = file.reader(&buffer);
    const allocator = std.testing.allocator;
    var arena = std.heap.ArenaAllocator.init(allocator);
    defer arena.deinit();
    var _io = kaitai_struct.KaitaiStream.fromFileReader(&reader);
    const r = try repeat_until_complex.RepeatUntilComplex.create(&arena, &_io, null, null);
    try std.testing.expectEqual(3, r.first.items.len);
    try std.testing.expectEqual(4, r.first.items[0].count);
    try std.testing.expectEqualSlices(u8, &.{ 0 + 1, 2, 3, 4 }, r.first.items[0].values.items);
    try std.testing.expectEqual(2, r.first.items[1].count);
    try std.testing.expectEqualSlices(u8, &.{ 0 + 1, 2 }, r.first.items[1].values.items);
    try std.testing.expectEqual(0, r.first.items[2].count);
    try std.testing.expectEqual(4, r.second.items.len);
    try std.testing.expectEqual(6, r.second.items[0].count);
    try std.testing.expectEqualSlices(u16, &.{ 0 + 1, 2, 3, 4, 5, 6 }, r.second.items[0].values.items);
    try std.testing.expectEqual(3, r.second.items[1].count);
    try std.testing.expectEqualSlices(u16, &.{ 0 + 1, 2, 3 }, r.second.items[1].values.items);
    try std.testing.expectEqual(4, r.second.items[2].count);
    try std.testing.expectEqualSlices(u16, &.{ 0 + 1, 2, 3, 4 }, r.second.items[2].values.items);
    try std.testing.expectEqual(0, r.second.items[3].count);
    try std.testing.expectEqualSlices(u8, &.{ 0 + 102, 111, 111, 98, 97, 114, 0 }, r.third.items);
}
