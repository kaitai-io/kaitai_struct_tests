// Autogenerated from KST: please remove this line if doing any edits by hand!

const std = @import("std");
const kaitai_struct = @import("kaitai_struct");
const expr_if_int_eq = @import("../formats/expr_if_int_eq.zig");

test "ExprIfIntEq" {
    const file = try std.fs.cwd().openFile("../../src/process_coerce_switch.bin", .{});
    defer file.close();
    var buffer: [8]u8 = undefined;
    var reader = file.reader(&buffer);
    const allocator = std.testing.allocator;
    var arena = std.heap.ArenaAllocator.init(allocator);
    defer arena.deinit();
    var _io = kaitai_struct.KaitaiStream.fromFileReader(&reader);
    const r = try expr_if_int_eq.ExprIfIntEq.create(&arena, &_io, null, null);
    try std.testing.expectEqual(true, (try r.seqEqLit()));
    try std.testing.expectEqual(true, (try r.seqEqCalc()));
    try std.testing.expectEqual(true, (try r.seqEqCalcIf()));
    try std.testing.expectEqual(true, (try r.seqEqSeqIf()));
    try std.testing.expectEqual(true, (try r.calcEqLit()));
    try std.testing.expectEqual(true, (try r.calcEqCalcIf()));
    try std.testing.expectEqual(true, (try r.calcEqSeqIf()));
    try std.testing.expectEqual(true, (try r.calcIfEqLit()));
    try std.testing.expectEqual(true, (try r.calcIfEqSeqIf()));
    try std.testing.expectEqual(true, (try r.seqIfEqLit()));
}
