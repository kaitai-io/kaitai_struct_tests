// Autogenerated from KST: please remove this line if doing any edits by hand!

const std = @import("std");
const kaitai_struct = @import("kaitai_struct");
const float_to_i = @import("../formats/float_to_i.zig");

test "FloatToI" {
    const file = try std.fs.cwd().openFile("../../src/floating_points.bin", .{});
    defer file.close();
    var buffer: [8]u8 = undefined;
    var reader = file.reader(&buffer);
    const allocator = std.testing.allocator;
    var arena = std.heap.ArenaAllocator.init(allocator);
    defer arena.deinit();
    var _io = kaitai_struct.KaitaiStream.fromFileReader(&reader);
    const r = try float_to_i.FloatToI.create(&arena, &_io, null, null);
    try std.testing.expectEqual(0.5, r.single_value);
    try std.testing.expectEqual(0.25, r.double_value);
    try std.testing.expectEqual(0.5, r.single_value_if);
    try std.testing.expectEqual(0.25, r.double_value_if);
    try std.testing.expectEqual(0, (try r.singleI()));
    try std.testing.expectEqual(0, (try r.doubleI()));
    try std.testing.expectEqual(0, (try r.singleIfI()));
    try std.testing.expectEqual(0, (try r.doubleIfI()));
    try std.testing.expectEqual(1, (try r.float1I()));
    try std.testing.expectEqual(1, (try r.float2I()));
    try std.testing.expectEqual(1, (try r.float3I()));
    try std.testing.expectEqual(-2, (try r.float4I()));
    try std.testing.expectEqual(13, (try r.calcIfI()));
}
