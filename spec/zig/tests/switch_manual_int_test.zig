// Autogenerated from KST: please remove this line if doing any edits by hand!

const std = @import("std");
const kaitai_struct = @import("kaitai_struct");
const switch_manual_int = @import("../formats/switch_manual_int.zig");

test "SwitchManualInt" {
    const file = try std.fs.cwd().openFile("../../src/switch_opcodes.bin", .{});
    defer file.close();
    var buffer: [8]u8 = undefined;
    var reader = file.reader(&buffer);
    const allocator = std.testing.allocator;
    var arena = std.heap.ArenaAllocator.init(allocator);
    defer arena.deinit();
    var _io = kaitai_struct.KaitaiStream.fromFileReader(&reader);
    const r = try switch_manual_int.SwitchManualInt.create(&arena, &_io, null, null);
    try std.testing.expectEqual(4, r.opcodes.items.len);
    try std.testing.expectEqual(83, r.opcodes.items[0].code);
    try std.testing.expectEqualStrings("foobar", @as(*switch_manual_int.SwitchManualInt.Opcode.Strval, r.opcodes.items[0].body).value);
    try std.testing.expectEqual(73, r.opcodes.items[1].code);
    try std.testing.expectEqual(66, @as(*switch_manual_int.SwitchManualInt.Opcode.Intval, r.opcodes.items[1].body).value);
    try std.testing.expectEqual(73, r.opcodes.items[2].code);
    try std.testing.expectEqual(55, @as(*switch_manual_int.SwitchManualInt.Opcode.Intval, r.opcodes.items[2].body).value);
    try std.testing.expectEqual(83, r.opcodes.items[3].code);
    try std.testing.expectEqualStrings("", @as(*switch_manual_int.SwitchManualInt.Opcode.Strval, r.opcodes.items[3].body).value);
}
