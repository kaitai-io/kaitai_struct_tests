// Autogenerated from KST: please remove this line if doing any edits by hand!

const std = @import("std");
const kaitai_struct = @import("kaitai_struct");
const expr_bits = @import("../formats/expr_bits.zig");

test "ExprBits" {
    const file = try std.fs.cwd().openFile("../../src/switch_opcodes.bin", .{});
    defer file.close();
    var buffer: [8]u8 = undefined;
    var reader = file.reader(&buffer);
    const allocator = std.testing.allocator;
    var arena = std.heap.ArenaAllocator.init(allocator);
    defer arena.deinit();
    var _io = kaitai_struct.KaitaiStream.fromFileReader(&reader);
    const r = try expr_bits.ExprBits.create(&arena, &_io, null, null);
    try std.testing.expectEqual(2, r.a);
    try std.testing.expectEqual(expr_bits.ExprBits.Items.foo, r.enum_seq);
    try std.testing.expectEqualSlices(u8, &[_]u8{ 102, 111 }, r.byte_size);
    try std.testing.expectEqual(2, r.repeat_expr.items.len);
    try std.testing.expectEqual(111, r.repeat_expr.items[0]);
    try std.testing.expectEqual(98, r.repeat_expr.items[1]);
    try std.testing.expectEqual(97, r.switch_on_type);
    try std.testing.expectEqual(29184, r.switch_on_endian.foo);
    try std.testing.expectEqual(expr_bits.ExprBits.Items.bar, (try r.enumInst()));
    try std.testing.expectEqual(111, (try r.instPos()));
}
