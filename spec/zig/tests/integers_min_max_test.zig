// Autogenerated from KST: please remove this line if doing any edits by hand!

const std = @import("std");
const kaitai_struct = @import("kaitai_struct");
const integers_min_max = @import("../formats/integers_min_max.zig");

test "IntegersMinMax" {
    const file = try std.fs.cwd().openFile("../../src/integers_min_max.bin", .{});
    defer file.close();
    var buffer: [8]u8 = undefined;
    var reader = file.reader(&buffer);
    const allocator = std.testing.allocator;
    var arena = std.heap.ArenaAllocator.init(allocator);
    defer arena.deinit();
    var _io = kaitai_struct.KaitaiStream.fromFileReader(&reader);
    const r = try integers_min_max.IntegersMinMax.create(&arena, &_io, null, null);
    try std.testing.expectEqual(0, r.unsigned_min.u1);
    try std.testing.expectEqual(0, r.unsigned_min.u2le);
    try std.testing.expectEqual(0, r.unsigned_min.u4le);
    try std.testing.expectEqual(0, r.unsigned_min.u8le);
    try std.testing.expectEqual(0, r.unsigned_min.u2be);
    try std.testing.expectEqual(0, r.unsigned_min.u4be);
    try std.testing.expectEqual(0, r.unsigned_min.u8be);
    try std.testing.expectEqual(255, r.unsigned_max.u1);
    try std.testing.expectEqual(65535, r.unsigned_max.u2le);
    try std.testing.expectEqual(4294967295, r.unsigned_max.u4le);
    try std.testing.expectEqual(18446744073709551615, r.unsigned_max.u8le);
    try std.testing.expectEqual(65535, r.unsigned_max.u2be);
    try std.testing.expectEqual(4294967295, r.unsigned_max.u4be);
    try std.testing.expectEqual(18446744073709551615, r.unsigned_max.u8be);
    try std.testing.expectEqual(-128, r.signed_min.s1);
    try std.testing.expectEqual(-32768, r.signed_min.s2le);
    try std.testing.expectEqual(-2147483648, r.signed_min.s4le);
    try std.testing.expectEqual(-9223372036854775808, r.signed_min.s8le);
    try std.testing.expectEqual(-32768, r.signed_min.s2be);
    try std.testing.expectEqual(-2147483648, r.signed_min.s4be);
    try std.testing.expectEqual(-9223372036854775808, r.signed_min.s8be);
    try std.testing.expectEqual(127, r.signed_max.s1);
    try std.testing.expectEqual(32767, r.signed_max.s2le);
    try std.testing.expectEqual(2147483647, r.signed_max.s4le);
    try std.testing.expectEqual(9223372036854775807, r.signed_max.s8le);
    try std.testing.expectEqual(32767, r.signed_max.s2be);
    try std.testing.expectEqual(2147483647, r.signed_max.s4be);
    try std.testing.expectEqual(9223372036854775807, r.signed_max.s8be);
}
