// Autogenerated from KST: please remove this line if doing any edits by hand!

const std = @import("std");
const kaitai_struct = @import("kaitai_struct");
const ts_packet_header = @import("../formats/ts_packet_header.zig");

test "TsPacketHeader" {
    const file = try std.fs.cwd().openFile("../../src/ts_packet.bin", .{});
    defer file.close();
    var buffer: [8]u8 = undefined;
    var reader = file.reader(&buffer);
    const allocator = std.testing.allocator;
    var arena = std.heap.ArenaAllocator.init(allocator);
    defer arena.deinit();
    var _io = kaitai_struct.KaitaiStream.fromFileReader(&reader);
    const r = try ts_packet_header.TsPacketHeader.create(&arena, &_io, null, null);
    try std.testing.expectEqual(71, r.sync_byte);
    try std.testing.expectEqual(false, r.transport_error_indicator);
    try std.testing.expectEqual(false, r.payload_unit_start_indicator);
    try std.testing.expectEqual(true, r.transport_priority);
    try std.testing.expectEqual(33, r.pid);
    try std.testing.expectEqual(0, r.transport_scrambling_control);
    try std.testing.expectEqual(ts_packet_header.TsPacketHeader.AdaptationFieldControlEnum.payload_only, r.adaptation_field_control);
}
