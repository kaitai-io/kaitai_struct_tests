#!/usr/bin/env ruby

# Convert tests result from many different languages from test
# framework's native format to our unified JSON.
#
# Usage: convert_to_json {lang} {infile} {outfile}

require 'time'

require_relative 'junit_xml_parser'
require_relative 'rspec_json_parser'
require_relative 'boost_test_parser'
require_relative 'nunit_xml_parser'
require_relative 'valgrind_xml_parser'
require_relative 'build_failed_parser'
require_relative 'text_list_parser'
require_relative 'trx_xml_parser'
require_relative 'zig_json_parser'

raise 'Needs exactly 3 arguments' unless ARGV.size == 3

# Priority of test result statuses (in case of a collision, the higher priority wins)
STATUS_PRIORITY = {
  passed: 0,
  skipped: 1,
  leak: 2,
  failed: 3,
  spec_build_failed: 4,
  format_build_failed: 5,
}

def reports_to_h(*reports)
  obj = {}
  reports.each { |report|
    report.each_test { |t|
      k = t.name
      v = t.to_h
      if !obj.key?(k)
        obj[k] = v
        next
      end

      old_status = obj[k]['status']
      new_status = v['status']

      if STATUS_PRIORITY[new_status] > STATUS_PRIORITY[old_status]
        warn "#{k}: overwriting #{JSON.generate(obj[k])} with #{JSON.generate(v)}"
        obj[k] = v
      end
    }
  }
  obj
end

def add_kst_adoption(tests, log_dir)
  kst_tests = File.readlines("#{log_dir}/kst_adoption.log").map { |name| name.chomp }
  kst_test_used = {}
  kst_tests.each { |name| kst_test_used[name] = false }
  tests.each_pair { |name, test_result|
    kst_name = nil
    if kst_test_used.has_key?(name)
      kst_name = name
    elsif name =~ /^(.+?)\./ && kst_test_used.has_key?($1)
      kst_name = $1
    end

    if kst_name
      test_result['is_kst'] = true
      kst_test_used[kst_name] = true
    end
  }
  kst_tests.each { |name|
    if !kst_test_used.fetch(name)
      tests[name] ||= {}
      tests[name]['is_kst'] = true
    end
  }
  tests
end

def report_summary(result)
  by_status = {kst: 0}
  result.each_pair { |name, test_result|
    next if name[0] == '$'
    status = test_result['status']
    by_status[status] ||= 0
    by_status[status] += 1
    by_status[:kst] += 1 if test_result['is_kst']
  }

  puts "SUMMARY: #{JSON.generate(by_status)}"
end

lang, infile, outfile = ARGV

result = case lang
when 'cpp_stl'
  add_kst_adoption(
    reports_to_h(
      # Valgrind XML logs are processed first so that a Valgrind error caused by
      # a test takes precedence over normal unit test failures (because the
      # `reports_to_h` function keeps the first test result with a status of
      # `:failed` if there are more than one).
      #
      # Note that if there is only a leak in a failed test, `reports_to_h` still
      # selects the test assertion failure as the overall test result, because
      # `:failed` has a higher priority than `:leak`.
      ValgrindXMLParser.new("#{infile}/valgrind-*.xml", true),
      BoostTestParser.new("#{infile}/results-*.xml", true),
      BuildFailedParser.new("#{infile}/build_failed_tests.txt")
    ),
    infile
  )
when 'java', 'java-write'
  add_kst_adoption(
    reports_to_h(
      JUnitXMLParser.new("#{infile}/junitreports", lang == 'java-write'),
      BuildFailedParser.new("#{infile}/build_failed_tests.txt")
    ),
    infile
  )
when 'rust'
  add_kst_adoption(
    reports_to_h(
      JUnitXMLParser.new("#{infile}/report.xml"),
      BuildFailedParser.new("#{infile}/build_failed_tests.txt")
    ),
    infile
  )
when 'zig'
  add_kst_adoption(
    reports_to_h(
      ZigJSONParser.new("#{infile}/report.json", "#{infile}/stderr.log"),
      BuildFailedParser.new("#{infile}/build_failed_tests.txt")
    ),
    infile
  )
when 'lua', 'nim'
  add_kst_adoption(
    reports_to_h(JUnitXMLParser.new("#{infile}/report.xml")),
    infile
  )
when 'go', 'perl', 'python', 'python-write', 'construct', 'julia'
  add_kst_adoption(
    reports_to_h(JUnitXMLParser.new("#{infile}/report.xml", lang == 'python-write')),
    infile
  )
when 'javascript'
  add_kst_adoption(
    reports_to_h(JUnitXMLParser.new("#{infile}/test-output-javascript.xml")),
    infile
  )
when 'php'
  add_kst_adoption(
    reports_to_h(JUnitXMLParser.new(infile)),
    infile
  )
when 'ruby'
  add_kst_adoption(
    reports_to_h(RSpecJSONParser.new("#{infile}/test-output-ruby.json")),
    infile
  )
when 'csharp'
  test_results = nil
  xml_log = "#{infile}/TestResult.xml"
  test_results = NUnitXMLParser.new(xml_log) if File.exist?(xml_log)
  xml_log = "#{infile}/TestResultTrx.xml"
  test_results = TRXXMLParser.new(xml_log) if File.exist?(xml_log)

  raise "No XML test results files found in #{infile}" unless test_results

  add_kst_adoption(
    reports_to_h(
      test_results,
      BuildFailedParser.new("#{infile}/build_failed_tests.txt"),
    ),
    infile
  )
when 'graphviz'
  reports_to_h(
    TextListParser.new("#{infile}/passed.log"),
    BuildFailedParser.new("#{infile}/build_failed_tests.txt", true),
  )
else
  raise "Unable to handle language #{lang.inspect}"
end

meta = {
  'lang' => lang,
  'timestamp' => Time.now.utc.iso8601,
}

if ENV['TRAVIS_BUILD_ID']
  meta['ci'] = {
    'ci' => 'travis',
    'build_id' => ENV['TRAVIS_BUILD_ID'],
    'job_id' => ENV['TRAVIS_JOB_ID'],
    'job_number' => ENV['TRAVIS_JOB_NUMBER'],
    'url' => ENV['TRAVIS_JOB_WEB_URL'],
  }
end

if ENV['APPVEYOR']
  account = ENV['APPVEYOR_ACCOUNT_NAME']
  project = ENV['APPVEYOR_PROJECT_SLUG']
  build_id = ENV['APPVEYOR_BUILD_ID']
  job_id = ENV['APPVEYOR_JOB_ID']
  url = "https://ci.appveyor.com/project/#{account}/#{project}/builds/#{build_id}/job/#{job_id}"

  meta['ci'] = {
    'ci' => 'appveyor',
    'build_id' => build_id,
    'job_id' => job_id,
    'job_number' => ENV['APPVEYOR_JOB_NUMBER'],
    'url' => url,
  }
end

if ENV['GITHUB_ACTIONS']
  meta['ci'] = {
    'ci' => 'github',
    'run_id' => ENV['GITHUB_RUN_ID'],
    'run_number' => ENV['GITHUB_RUN_NUMBER'],
    'job_id' => ENV['GH_JOB_ID'],
    'url' => ENV['GH_HTML_URL'],
  }
end

result['$meta'] = meta

# Try to ensure stable order of tests in generated JSON. There are two ways to
# achieve this: `Array#to_h` is [better](https://stackoverflow.com/a/28303699)
# but only available since Ruby 2.0, `Hash.[]` is "tricky" but available in 1.9,
# so we use it as a fallback.
if [].respond_to?(:to_h)
  result = result.sort.to_h
else
  result = Hash[result.sort]
end

json = JSON.pretty_generate(result) + "\n"

File.write(outfile, json)

report_summary(result)
